import React, { useState } from 'react';
import { Calendar, Clock, Shield, AlertTriangle, CheckCircle } from 'lucide-react';
import { Button, Card } from '../ui';
import { useSupabaseData } from '../../hooks/useSupabaseData';
import { useAuth } from '../../hooks/useAuth';

interface StreakRecoveryProps {
  currentStreak: number;
  lastCompletedDate?: string;
  onRecoveryUsed: () => void;
}

export const StreakRecovery: React.FC<StreakRecoveryProps> = ({
  currentStreak,
  lastCompletedDate,
  onRecoveryUsed
}) => {
  const { user } = useAuth();
  const { profile, updateProfile } = useSupabaseData(user);
  const [isUsingRecovery, setIsUsingRecovery] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);

  // Calculate if recovery is available
  const daysSinceLastCompleted = lastCompletedDate 
    ? Math.floor((Date.now() - new Date(lastCompletedDate).getTime()) / (1000 * 60 * 60 * 24))
    : 0;

  const canUseRecovery = daysSinceLastCompleted <= 2 && currentStreak >= 3;
  const recoveryCount = profile?.recovery_count || 0;
  const maxRecoveries = Math.floor(currentStreak / 7); // 1 recovery per week of streak
  const hasRecoveriesLeft = recoveryCount < maxRecoveries;

  const handleUseRecovery = async () => {
    if (!canUseRecovery || !hasRecoveriesLeft) return;

    setIsUsingRecovery(true);
    try {
      // Update recovery count
      await updateProfile({
        recovery_count: recoveryCount + 1,
        last_recovery_used: new Date().toISOString()
      });

      onRecoveryUsed();
      setShowConfirmation(true);
      
      setTimeout(() => {
        setShowConfirmation(false);
      }, 3000);
    } catch (error) {
      console.error('Failed to use recovery:', error);
    } finally {
      setIsUsingRecovery(false);
    }
  };

  if (showConfirmation) {
    return (
      <Card className="bg-green-50 border-green-200 text-center" padding="lg">
        <CheckCircle size={48} className="text-green-600 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-green-800 mb-2">
          Streak Recovered! ðŸŽ‰
        </h3>
        <p className="text-sm text-green-700">
          Your {currentStreak}-day streak has been protected. Keep going strong!
        </p>
      </Card>
    );
  }

  if (!canUseRecovery) {
    return (
      <Card className="bg-gray-50 border-gray-200" padding="lg">
        <div className="text-center">
          <Shield size={32} className="text-gray-400 mx-auto mb-3" />
          <h3 className="text-lg font-semibold text-gray-600 mb-2">
            Streak Recovery
          </h3>
          <p className="text-sm text-gray-500">
            Recovery is available when you miss 1-2 days and have a streak of 3+ days
          </p>
        </div>
      </Card>
    );
  }

  return (
    <Card className="bg-orange-50 border-orange-200" padding="lg">
      <div className="flex items-start gap-4">
        <AlertTriangle size={32} className="text-orange-600 flex-shrink-0 mt-1" />
        
        <div className="flex-1">
          <h3 className="text-lg font-semibold text-orange-800 mb-2">
            Streak at Risk! 
          </h3>
          
          <p className="text-sm text-orange-700 mb-4">
            You missed {daysSinceLastCompleted} day{daysSinceLastCompleted > 1 ? 's' : ''} 
            and your {currentStreak}-day streak is about to break.
          </p>

          <div className="space-y-3 mb-4">
            <div className="flex items-center gap-2 text-sm text-orange-700">
              <Calendar size={16} />
              <span>Last completed: {lastCompletedDate ? new Date(lastCompletedDate).toLocaleDateString() : 'Never'}</span>
            </div>
            
            <div className="flex items-center gap-2 text-sm text-orange-700">
              <Clock size={16} />
              <span>Recovery window: {2 - daysSinceLastCompleted} day{2 - daysSinceLastCompleted !== 1 ? 's' : ''} left</span>
            </div>
            
            <div className="flex items-center gap-2 text-sm text-orange-700">
              <Shield size={16} />
              <span>Recoveries available: {maxRecoveries - recoveryCount} of {maxRecoveries}</span>
            </div>
          </div>

          {hasRecoveriesLeft ? (
            <div className="space-y-3">
              <p className="text-xs text-orange-600 bg-orange-100 p-2 rounded">
                <strong>How it works:</strong> Streak Recovery protects your progress when life gets in the way. 
                You earn 1 recovery for every 7-day streak you complete.
              </p>
              
              <Button
                onClick={handleUseRecovery}
                variant="primary"
                fullWidth
                isLoading={isUsingRecovery}
                leftIcon={<Shield size={16} />}
              >
                Use Streak Recovery
              </Button>
            </div>
          ) : (
            <div className="bg-orange-100 p-3 rounded-lg">
              <p className="text-sm text-orange-800 font-medium">
                No recoveries available
              </p>
              <p className="text-xs text-orange-700 mt-1">
                Complete more 7-day streaks to earn recovery tokens
              </p>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};