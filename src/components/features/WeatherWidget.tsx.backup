import React, { useState, useEffect } from 'react';
import { Cloud, MapPin, Thermometer, Droplets, RefreshCw, AlertTriangle } from 'lucide-react';
import { Button, Card } from '../ui';
import { getCurrentWeather, getCurrentLocation, calculateColdShowerDifficulty, getWeatherByCity } from '../../utils/weatherAPI';

export const WeatherWidget: React.FC = () => {
  const [weather, setWeather] = useState<any>(null);
  const [difficulty, setDifficulty] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [useManualLocation, setUseManualLocation] = useState(false);
  const [manualCity, setManualCity] = useState('');

  useEffect(() => {
    // Try to load weather on component mount
    loadWeatherByLocation();
  }, []);

  const loadWeatherByLocation = async () => {
    setIsLoading(true);
    setError('');

    try {
      const location = await getCurrentLocation();
      const weatherData = await getCurrentWeather(location.lat, location.lon);
      
      if (weatherData) {
        setWeather(weatherData);
        setDifficulty(calculateColdShowerDifficulty(weatherData));
      } else {
        setError('Weather data unavailable');
      }
    } catch (err: any) {
      setError(err.message || 'Unable to get location');
      setUseManualLocation(true);
    } finally {
      setIsLoading(false);
    }
  };

  const loadWeatherByCity = async () => {
    if (!manualCity.trim()) return;

    setIsLoading(true);
    setError('');

    try {
      const weatherData = await getWeatherByCity(manualCity);
      
      if (weatherData) {
        setWeather(weatherData);
        setDifficulty(calculateColdShowerDifficulty(weatherData));
        setUseManualLocation(false);
      } else {
        setError('City not found');
      }
    } catch (err: any) {
      setError(err.message || 'Failed to get weather');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCitySubmit = (e: React.FormEvent) => {
    e.preventDefault();
    loadWeatherByCity();
  };

  if (isLoading) {
    return (
      <Card className="text-center" padding="lg">
        <RefreshCw size={32} className="text-blue-600 mx-auto mb-3 animate-spin" />
        <p className="text-gray-600">Loading weather data...</p>
      </Card>
    );
  }

  if (error && !useManualLocation) {
    return (
      <Card className="bg-yellow-50 border-yellow-200" padding="lg">
        <div className="text-center">
          <AlertTriangle size={32} className="text-yellow-600 mx-auto mb-3" />
          <h3 className="font-semibold text-yellow-800 mb-2">Weather Unavailable</h3>
          <p className="text-sm text-yellow-700 mb-4">{error}</p>
          
          <div className="space-y-3">
            <Button
              onClick={() => setUseManualLocation(true)}
              variant="primary"
              size="sm"
            >
              Enter City Manually
            </Button>
            
            <Button
              onClick={loadWeatherByLocation}
              variant="secondary"
              size="sm"
            >
              Try Again
            </Button>
          </div>
        </div>
      </Card>
    );
  }

  if (useManualLocation && !weather) {
    return (
      <Card padding="lg">
        <h3 className="font-semibold text-gray-900 mb-4">Enter Your Location</h3>
        
        <form onSubmit={handleCitySubmit} className="space-y-3">
          <input
            type="text"
            value={manualCity}
            onChange={(e) => setManualCity(e.target.value)}
            placeholder="Enter city name (e.g., New York, London)"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            required
          />
          
          <div className="flex gap-2">
            <Button type="submit" variant="primary" className="flex-1">
              Get Weather
            </Button>
            <Button 
              type="button"
              onClick={() => {
                setUseManualLocation(false);
                loadWeatherByLocation();
              }}
              variant="secondary"
              className="flex-1"
            >
              Use Location
            </Button>
          </div>
        </form>
        
        {error && (
          <p className="text-sm text-red-600 mt-2">{error}</p>
        )}
      </Card>
    );
  }

  if (!weather || !difficulty) {
    return (
      <Card className="text-center text-gray-500" padding="lg">
        <Cloud size={32} className="mx-auto mb-3" />
        <p>Weather data not available</p>
      </Card>
    );
  }

  return (
    <Card padding="lg">
      <div className="flex justify-between items-start mb-4">
        <h3 className="text-lg font-semibold text-gray-900">Today's Challenge</h3>
        <Button
          variant="ghost"
          size="sm"
          onClick={loadWeatherByLocation}
          className="p-2"
          aria-label="Refresh weather"
        >
          <RefreshCw size={16} />
        </Button>
      </div>

      {/* Weather Info */}
      <div className="flex items-center gap-3 mb-4">
        <Cloud size={24} className="text-blue-600" />
        <div>
          <div className="flex items-center gap-2">
            <MapPin size={14} className="text-gray-500" />
            <span className="text-sm text-gray-600">{weather.location}</span>
          </div>
          <div className="flex items-center gap-4 text-sm text-gray-700">
            <div className="flex items-center gap-1">
              <Thermometer size={14} />
              <span>{weather.temperature}Â°C</span>
            </div>
            <div className="flex items-center gap-1">
              <Droplets size={14} />
              <span>{weather.humidity}%</span>
            </div>
          </div>
        </div>
      </div>

      {/* Difficulty Assessment */}
      <div className="bg-gray-50 rounded-lg p-4 mb-4">
        <div className="flex items-center justify-between mb-2">
          <span className="font-medium text-gray-700">Difficulty Level:</span>
          <span className={`font-bold ${difficulty.color}`}>
            {difficulty.level}
          </span>
        </div>
        
        <p className="text-sm text-gray-600 mb-3">
          {difficulty.description}
        </p>

        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">Bonus Points:</span>
          <span className="font-bold text-blue-600">+{difficulty.bonusPoints}</span>
        </div>
      </div>

      {/* Tips */}
      <div>
        <h4 className="font-medium text-gray-900 mb-2">ðŸ’¡ Today's Tips:</h4>
        <ul className="space-y-1">
          {difficulty.tips.map((tip: string, index: number) => (
            <li key={index} className="text-sm text-gray-700 flex items-start gap-2">
              <span className="text-blue-600 mt-1">â€¢</span>
              <span>{tip}</span>
            </li>
          ))}
        </ul>
      </div>

      {/* Manual Location Toggle */}
      <div className="mt-4 pt-3 border-t border-gray-200">
        <Button
          onClick={() => setUseManualLocation(true)}
          variant="ghost"
          size="sm"
          className="w-full text-gray-600"
        >
          Change Location
        </Button>
      </div>
    </Card>
  );
};