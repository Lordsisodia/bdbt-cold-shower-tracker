import React, { useState } from 'react';
import { Wand2, Loader, CheckCircle, AlertCircle, Download, Eye } from 'lucide-react';
import { enhancedGrokService } from '../../services/enhancedGrokService';
import { exportService } from '../../services/exportService';
import { DatabaseTip } from '../../services/tipsDatabaseService';

interface GeneratedContent {
  originalInput: string;
  expandedTip: DatabaseTip;
  contentPlan: any;
  pdfUrl?: string;
  status: 'idle' | 'generating' | 'complete' | 'error';
  error?: string;
}

const SimpleTipGenerator: React.FC = () => {
  const [tipInput, setTipInput] = useState('');
  const [category, setCategory] = useState<'health' | 'wealth' | 'happiness'>('health');
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    if (!tipInput.trim()) return;

    setIsGenerating(true);
    setGeneratedContent({
      originalInput: tipInput,
      expandedTip: {} as DatabaseTip,
      contentPlan: null,
      status: 'generating'
    });

    try {
      // Step 1: Create a basic tip structure from the simple input
      const basicTip: DatabaseTip = {
        id: Date.now(),
        title: '', // Will be generated by Grok
        subtitle: '',
        category,
        subcategory: '',
        difficulty: 'Easy',
        description: tipInput.trim(),
        primary_benefit: '',
        secondary_benefit: '',
        tertiary_benefit: '',
        implementation_time: '',
        frequency: '',
        cost: '',
        scientific_backing: false,
        tags: '',
        images: {
          hero: `https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop&q=80`,
          benefits: `https://images.unsplash.com/photo-1499209974431-9dddcece7f88?w=600&h=400&fit=crop&q=80`,
          implementation: `https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=600&h=400&fit=crop&q=80`,
          cta: `https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=800&h=600&fit=crop&q=80`
        }
      };

      // Step 2: Use Grok to expand the simple tip into comprehensive content
      console.log('ðŸ¤– Expanding tip with Grok AI...');
      const expandedContent = await enhancedGrokService.expandSimpleTipToFull(tipInput, category);
      
      // Step 3: Create the full tip structure
      const fullTip: DatabaseTip = {
        ...basicTip,
        title: expandedContent.title,
        subtitle: expandedContent.subtitle,
        subcategory: expandedContent.subcategory,
        difficulty: expandedContent.difficulty,
        description: expandedContent.expandedDescription,
        primary_benefit: expandedContent.primaryBenefit,
        secondary_benefit: expandedContent.secondaryBenefit,
        tertiary_benefit: expandedContent.tertiaryBenefit,
        implementation_time: expandedContent.implementationTime,
        frequency: expandedContent.frequency,
        cost: expandedContent.cost,
        scientific_backing: expandedContent.scientificBacking,
        tags: expandedContent.tags.join(', ')
      };

      // Step 4: Generate comprehensive content plan
      const contentPlan = await enhancedGrokService.generateComprehensiveContent(fullTip);

      // Step 5: Generate professional PDF
      console.log('ðŸ“„ Creating professional PDF...');
      const pdfResult = await exportService.exportTip(fullTip, {
        format: 'pdf',
        quality: 'premium',
        includeImages: true,
        includeMetadata: true
      });

      setGeneratedContent({
        originalInput: tipInput,
        expandedTip: fullTip,
        contentPlan,
        pdfUrl: pdfResult.downloadUrl,
        status: 'complete'
      });

    } catch (error) {
      console.error('Error generating content:', error);
      setGeneratedContent({
        originalInput: tipInput,
        expandedTip: {} as DatabaseTip,
        contentPlan: null,
        status: 'error',
        error: error instanceof Error ? error.message : 'Generation failed'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadPDF = () => {
    if (generatedContent?.pdfUrl) {
      const link = document.createElement('a');
      link.href = generatedContent.pdfUrl;
      link.download = `${generatedContent.expandedTip.title?.replace(/[^a-z0-9]/gi, '_') || 'tip'}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold text-gray-900">Simple Tip Generator</h1>
        <p className="text-xl text-gray-600">
          Turn a simple 1-2 sentence tip into a comprehensive content plan and professional PDF
        </p>
      </div>

      {/* Input Form */}
      <div className="bg-white rounded-2xl shadow-lg p-8 space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Category
          </label>
          <select
            value={category}
            onChange={(e) => setCategory(e.target.value as typeof category)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="health">Health & Wellness</option>
            <option value="wealth">Wealth & Finance</option>
            <option value="happiness">Happiness & Mindfulness</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Your Simple Tip (1-2 sentences)
          </label>
          <textarea
            value={tipInput}
            onChange={(e) => setTipInput(e.target.value)}
            placeholder="Example: Drink a glass of water first thing when you wake up. This helps kickstart your metabolism and hydration."
            className="w-full h-32 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            maxLength={500}
          />
          <div className="flex justify-between mt-2 text-sm text-gray-500">
            <span>Keep it simple - just the core tip idea</span>
            <span>{tipInput.length}/500</span>
          </div>
        </div>

        <button
          onClick={handleGenerate}
          disabled={!tipInput.trim() || isGenerating}
          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-400 disabled:to-gray-400 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 flex items-center justify-center gap-3"
        >
          {isGenerating ? (
            <>
              <Loader className="w-5 h-5 animate-spin" />
              Generating Content...
            </>
          ) : (
            <>
              <Wand2 className="w-5 h-5" />
              Generate Comprehensive Content Plan
            </>
          )}
        </button>
      </div>

      {/* Generation Progress */}
      {generatedContent && (
        <div className="bg-white rounded-2xl shadow-lg p-8">
          <div className="flex items-center gap-3 mb-6">
            {generatedContent.status === 'generating' && (
              <>
                <Loader className="w-6 h-6 animate-spin text-blue-600" />
                <h2 className="text-2xl font-bold text-gray-900">Generating Your Content...</h2>
              </>
            )}
            {generatedContent.status === 'complete' && (
              <>
                <CheckCircle className="w-6 h-6 text-green-600" />
                <h2 className="text-2xl font-bold text-gray-900">Content Generated Successfully!</h2>
              </>
            )}
            {generatedContent.status === 'error' && (
              <>
                <AlertCircle className="w-6 h-6 text-red-600" />
                <h2 className="text-2xl font-bold text-gray-900">Generation Failed</h2>
              </>
            )}
          </div>

          {generatedContent.status === 'generating' && (
            <div className="space-y-4">
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-2 h-2 bg-blue-600 rounded-full animate-pulse"></div>
                  <span className="text-sm font-medium text-blue-800">Step 1: Analyzing your tip</span>
                </div>
                <p className="text-sm text-blue-700">"{generatedContent.originalInput}"</p>
              </div>
              <div className="bg-gray-50 p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                  <span className="text-sm font-medium text-gray-600">Step 2: Expanding with AI content</span>
                </div>
              </div>
              <div className="bg-gray-50 p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                  <span className="text-sm font-medium text-gray-600">Step 3: Creating comprehensive plan</span>
                </div>
              </div>
              <div className="bg-gray-50 p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                  <span className="text-sm font-medium text-gray-600">Step 4: Generating professional PDF</span>
                </div>
              </div>
            </div>
          )}

          {generatedContent.status === 'complete' && (
            <div className="space-y-6">
              {/* Generated Tip Summary */}
              <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-xl border border-green-200">
                <h3 className="text-xl font-bold text-gray-900 mb-3">{generatedContent.expandedTip.title}</h3>
                <p className="text-gray-700 mb-4">{generatedContent.expandedTip.subtitle}</p>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-600">Category:</span>
                    <p className="text-gray-900 capitalize">{generatedContent.expandedTip.category}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Difficulty:</span>
                    <p className="text-gray-900">{generatedContent.expandedTip.difficulty}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Time:</span>
                    <p className="text-gray-900">{generatedContent.expandedTip.implementation_time}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Cost:</span>
                    <p className="text-gray-900">{generatedContent.expandedTip.cost}</p>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-4 justify-center">
                <button
                  onClick={handleDownloadPDF}
                  className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                >
                  <Download className="w-5 h-5" />
                  Download Professional PDF
                </button>
                <button className="flex items-center gap-2 border-2 border-gray-300 hover:bg-gray-50 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors">
                  <Eye className="w-5 h-5" />
                  Preview Content Plan
                </button>
              </div>

              {/* Content Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">9+</div>
                  <div className="text-sm text-blue-800">PDF Pages</div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">5</div>
                  <div className="text-sm text-green-800">Content Sections</div>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">AI</div>
                  <div className="text-sm text-purple-800">Enhanced</div>
                </div>
              </div>
            </div>
          )}

          {generatedContent.status === 'error' && (
            <div className="bg-red-50 p-6 rounded-xl border border-red-200">
              <p className="text-red-800 mb-4">{generatedContent.error}</p>
              <button
                onClick={() => setGeneratedContent(null)}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm"
              >
                Try Again
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SimpleTipGenerator;